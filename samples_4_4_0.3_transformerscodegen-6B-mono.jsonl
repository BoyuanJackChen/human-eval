{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    # TODO: Implement me\n    # pass"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    paren_stack = []\n    max_depth = 0\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(i)\n            max_depth = max(max_depth, len(paren_stack))\n        elif paren == ')':\n            if len(paren_stack) == 0:\n                return [-1]\n            paren_stack.pop()\n    return [max_depth] * len(paren_stack)"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(numbers[i], result[i - 1]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b!= 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return''.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "eturn [len(x) for x in music_string.split(' ')]"}
{"task_id": "HumanEval/18", "completion": "    return len(string.split(substring)) - 1"}
{"task_id": "HumanEval/19", "completion": "  return''.join(sorted(numbers.split(' ')))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n    return smallest, largest"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [((x - min_num) / (max_num - min_num)) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [int(value) for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    if n % 3 == 0:\n        return [3] + factorize(n // 3)\n    if n % 5 == 0:\n        return [5] + factorize(n // 5)\n    if n % 7 == 0:\n        return [7] + factorize(n // 7)\n    if n % 11 == 0:\n        return [11] + factorize(n // 11)\n    if n % 13 == 0:\n        return [13] + factorize(n // 13)\n    if n % 17 == 0:\n        return [17] + factorize(n // 17)\n    if n % 19 == 0:\n        return [19] +"}
{"task_id": "HumanEval/26", "completion": "    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "   if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial must have even number of coefficients.\")\n    if len(xs) == 0:\n        raise ValueError(\"Polynomial must have at least one coefficient.\")\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return -xs[1] / xs[0]\n    if len(xs) == 3:\n        return -xs[2] / (xs[1] * xs[0])\n    if len(xs) == 4:\n        return -xs[3] / (xs[2] * xs[1])\n    if len(xs) == 5:\n        return -xs[4] / (xs[3] * xs[2])\n    if len(xs) == 6:\n        return -xs"}
{"task_id": "HumanEval/33", "completion": "    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(sorted(l[i])[1])\n    return l2"}
{"task_id": "HumanEval/38", "completion": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return sum(1 for _ in range(n) if collision(n))"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "    if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp((n - 1) // 2, p) ** 2 * p % p"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join([i for i in text if i not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    \"*** YOUR CODE HERE ***\"\n    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return len(s0) == len(s1) and len(set(s0)) == len(set(s1))"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n / i\n            if is_prime(n):\n                return n\n        i += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "   if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return [1]\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) - 64 for c in s.upper() if c.isalpha())"}
{"task_id": "HumanEval/67", "completion": "    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    \n    return [min(evens), arr.index(min(evens))]\n"}
{"task_id": "HumanEval/69", "completion": "    lst = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i] > 0 and lst[i] >= lst[i-1]:\n            return lst[i]\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    return lst"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / (4 * (a + b + c)), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "    # TODO: Implement me\n    return 0"}
{"task_id": "HumanEval/74", "completion": "    return [x for x in lst1 if len(x) < len(lst2) and len(x) > 0]"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a/2)):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    return n ** int(x) == x"}
{"task_id": "HumanEval/77", "completion": "    return a**3 == a"}
{"task_id": "HumanEval/78", "completion": "    return sum(int(num[i]) % 2 == 0 for i in range(len(num)))"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    binary = \"db\" + binary + \"db\"\n    return binary"}
{"task_id": "HumanEval/80", "completion": "    return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == 1"}
{"task_id": "HumanEval/81", "completion": "    return [grade_equation(grade) for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2)"}
{"task_id": "HumanEval/84", "completion": "    return bin(N)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[::2])"}
{"task_id": "HumanEval/86", "completion": "   pass\n"}
{"task_id": "HumanEval/87", "completion": "   return sorted(lst, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    return sorted(array, reverse=True) if sum(array[0], array[-1]) % 2 else sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    new_alphabet = new_alphabet[1:] + new_alphabet[:1]\n    return ''.join([new_alphabet[alphabet.index(c)] for c in s])"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "    return sum(1 for s in S.split('.') if s.startswith('I'))"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) and (type(x) is int) and (type(y) is int) and (type(z) is int)"}
{"task_id": "HumanEval/93", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += chr(ord(letter) + 2)\n        else:\n            new_message += letter\n    return new_message"}
{"task_id": "HumanEval/94", "completion": "    return sum(map(int,str(max(lst))))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        return [2] + count_up_to(n - 1)"}
{"task_id": "HumanEval/97", "completion": "    return sum([int(x) * int(y) for x, y in zip(str(a), str(b))])"}
{"task_id": "HumanEval/98", "completion": "    return sum(1 for c in s[::2] if c.isupper())"}
{"task_id": "HumanEval/99", "completion": "    return int(round(float(value)))\n"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2 + 1\n        result.append(n)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split(',')"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return -1\n    elif x % 2 == 0 and y % 2!= 0:\n        return x\n    elif x % 2!= 0 and y % 2 == 0:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    return bin(int((n + m) / 2))[2:]"}
{"task_id": "HumanEval/104", "completion": "    return sorted(set(x))"}
{"task_id": "HumanEval/105", "completion": "   return [digit_to_name(num) for num in sorted(arr, reverse=True)]"}
{"task_id": "HumanEval/106", "completion": "   pass"}
{"task_id": "HumanEval/107", "completion": "    if n < 2:\n        return (0, 0)"}
{"task_id": "HumanEval/108", "completion": "    return sum(1 for num in arr if sum(int(digit) for digit in str(num)) > 0)"}
{"task_id": "HumanEval/109", "completion": "   if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    \n    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] == c:\n            s[i] = ''\n    return ''.join(s), s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    return [\"the number of odd elements %dn the str%dng %d of the %dnput.\" % (\n        sum(1 for c in s if int(c) % 2 == 1),\n        len(s),\n        len(s),\n        len(s)\n    ) for s in lst]"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    min_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n        curr_sum = max(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    if not grid or not grid[0]:\n        return 0\n    n = len(grid)\n    m = len(grid[0])\n    buckets = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                buckets[i][j] = capacity\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                buckets[i][j] -= 1\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                count += math.ceil(buckets[i][j] / capacity)\n    return count"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    return [word for word in s.split() if len(word) == n and word.count('a') == n]"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0])"}
{"task_id": "HumanEval/122", "completion": "    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n // 2) + [n]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]"}
{"task_id": "HumanEval/124", "completion": "    return True"}
{"task_id": "HumanEval/125", "completion": "   return txt.split()"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval1[1] or interval2[0] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"NO\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"NO\"\n    if interval1[0] =="}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    return sum(map(abs, arr)) * prod(map(sign, arr))"}
{"task_id": "HumanEval/129", "completion": "    m, n = len(grid), len(grid[0])\n    if k == 0:\n        return []\n    if k == 1:\n        return [grid[0][0]]\n    if k == 2:\n        return [grid[0][0], grid[0][1]]\n    if k == 3:\n        return [grid[0][0], grid[0][1], grid[0][2]]\n    if k == 4:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3]]\n    if k == 5:\n        return [grid[0][0], grid[0][1], grid[0][2], grid[0][3], grid[0][4]]\n    if k == 6:\n        return [grid[0][0], grid[0][1], grid[0][2],"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        return tri(n - 1) + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n - 2)[-2]]"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 0\n    else:\n        return n % 10 * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    return False"}
{"task_id": "HumanEval/133", "completion": "    return sum(map(lambda x: int(math.ceil(x)), lst)) ** 2"}
{"task_id": "HumanEval/134", "completion": "    if txt == \"\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \" \":\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    arr = sorted(arr)\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    if negative == []:\n        return (None, None)\n    elif positive == []:\n        return (None, max(negative))\n    else:\n        return (max(negative), min(positive))\n"}
{"task_id": "HumanEval/137", "completion": "  if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    return n % 2 == 0 and sum(range(2, n, 2)) == n"}
{"task_id": "HumanEval/139", "completion": "   if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)"}
{"task_id": "HumanEval/140", "completion": "    return re.sub(r'\\s+', '_', text)"}
{"task_id": "HumanEval/141", "completion": "    def is_valid_file_name(file_name):\n        if len(file_name) > 3:\n            return 'No'\n        if file_name.count('.')!= 1:\n            return 'No'\n        if file_name[0] not in 'abcdefghijklmnopqrstuvwxyz':\n            return 'No'\n        if file_name[-3:] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        return 'Yes'\n    return is_valid_file_name(file_name)"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return''.join(result)"}
{"task_id": "HumanEval/144", "completion": "    numerator, denominator = x.split('/')\n    numerator, denominator = int(numerator), int(denominator)\n    if numerator % denominator == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))"}
{"task_id": "HumanEval/146", "completion": "    return sum(1 for num in nums if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1)"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(a[i] * a[j] * a[k] for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0)"}
{"task_id": "HumanEval/148", "completion": "    pass"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    if not lst:\n        return 0\n    return sum([x**2 for x in lst if x % 2!= 0])"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]"}
{"task_id": "HumanEval/153", "completion": "   extensions_strength = {}\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n            elif letter.islower():\n                extension_strength -= 1\n        extensions_strength[extension] = extension_strength\n    return \"{}.{}\".format(class_name, max(extensions_strength, key=extensions_strength.get))"}
{"task_id": "HumanEval/154", "completion": "   if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if b in a[i:]:\n            return True\n        if b in a[i:] + a[:i]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    return (len(str(abs(num))), len(str(abs(num))))"}
{"task_id": "HumanEval/156", "completion": "    if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xii'\n    if number == 12:\n        return 'xiii'\n    if number == 13:\n        return 'xiv'\n    "}
{"task_id": "HumanEval/157", "completion": "    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2)"}
{"task_id": "HumanEval/158", "completion": "   max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    return [number + need, remaining - need]\n"}
{"task_id": "HumanEval/160", "completion": "    # TODO: Implement me\n    # pass\n    return None"}
{"task_id": "HumanEval/161", "completion": "    return ''.join(reversed(s.swapcase()) if s.isalpha() else s)\n"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    return [x for x in range(a, b + 1) if x % 2 == 0]\n"}
